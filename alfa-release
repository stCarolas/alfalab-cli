#!/usr/bin/env python3
# Publishes release (as git tag)

import sys
import semver
import argparse
from alfaproperties import Config
from git import Repo
from herodotus import Herodotus
import re
from sender import Sender

config = Config()
template = '_version\\s*=\\s*\\d*\\.\\d*\\.\\d*'
projects = config.get_value("git","projects").split(",")

def get_cli_args():
    parser = argparse.ArgumentParser(description='Generate changelog')
    parser.add_argument('repo',     
                        metavar = 'directory',
                        type = str, 
                        nargs = 1,
                        help = 'git repository')
    parser.add_argument('--fix',
                        dest = 'fix',
                        action = 'store_const',
                        const=True,
                        default = False,
                        help = 'git repository')
    parser.add_argument('--all',
                        dest = 'all',
                        action = 'store_const',
                        const=True,
                        default = False,
                        help = 'release all projects, mentioned in config')
    return parser.parse_args()

def update_inventory(inventory_name, project, new_version):
    inventory = config.get_value("global","scripts") + "/" + inventory_name
    with open(inventory) as f:
        filecontent = f.read()

    with open(inventory, 'w') as f:
        search_string = project.replace('-','_').replace('corp_list_','') + template
        match = re.search(search_string, filecontent)
        if match:
            original = match.group(0)
            updated = original[0:original.index("=") + 1] + " " + new_version
            filecontent = filecontent.replace(original, updated)
            f.write(filecontent)
            f.close()

def release(project, is_fix):
    repo = get_project_repo(project)
    tags = Herodotus(repo).get_tags()
    released_version = "1.0.0"
    if tags:
        last_release = tags[len(tags) - 1]
        if last_release:
            if is_fix:  
                released_version = semver.bump_patch(last_release.name)
            else:
                released_version = semver.bump_minor(last_release.name)
    repo = Repo(repo)
    repo.create_tag(released_version)
    update_inventory("integration", project, released_version)
    return released_version
    
def get_unreleased_projects():
    unreleased = []
    for project in projects:
        repo = get_project_repo(project)
        if Herodotus(repo).get_unreleased():
            unreleased.append(project)
    return unreleased

def get_project_repo(project):
    return config.get_value("git", project + ".url") 

def release_all(projects):
    releases = dict()
    for project in projects:
        released_version = release(project, False)
        releases[project] = released_version
    return releases

def finalize():
    for project in projects:
        tags = Herodotus(repo).get_tags()
        if tags:
            last_release = tags[len(tags) - 1]
            if last_release:
                update_inventory("production", project, last_release.name)

def query_builds(projects):
    eventSender = Sender(config.get_value("global","reactor_for_sending"))
    eventListener = Listener(config.get_value("global","reactor_for_listening"), channel)
    for project in projects:
        message = "{'event':'start job', 'notify':false, 'payload':{'job':'" + project + "'}}"
        eventSender.sync_send("public", message)
        eventListener.on_first_message()

        

if __name__ == '__main__':
    # print("dir",config.get_value("git", "corp-list-accounts-api.dir"))
    projects = get_unreleased_projects()
    # releases = release_all(projects)
    query_builds(projects)
    
    print(releases)
    # args = get_cli_args()
    # repo_directory = args.repo[0]

    # release = release(repo_directory, args.fix)

    # repo = Repo(repo_directory)
    # repo.create_tag(release)
    # repo.git.push(refs=True)
